class Conta:
    def __init__(self, agencia, numero_conta, cpf, quantidade_saques):
        self.agencia = agencia
        self.saldo = 0
        self.movimentacoes = []
        self.numero_conta = numero_conta
        self.cpf = cpf
        self.quantidade_saques = quantidade_saques

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.movimentacoes.append(f"Depósito: R$ {valor:.2f}")
            return "Depósito realizado com sucesso."
        else:
            return "Operação falhou! O valor informado é inválido."

    def sacar(self, valor, limite_valor_saque, limite_quantidade_saques):
        excedeu_saldo = valor > self.saldo
        excedeu_limite = valor > limite_valor_saque
        excedeu_saques = self.quantidade_saques >= limite_quantidade_saques

        if excedeu_saldo:
            return "Operação falhou! Você não tem saldo suficiente."
        elif excedeu_limite:
            return "Operação falhou! O valor do saque excede o limite."
        elif excedeu_saques:
            return "Operação falhou! Número máximo de saques excedido."
        elif valor > 0:
            self.saldo -= valor
            self.movimentacoes.append(f"Saque: R$ {valor:.2f}")
            self.quantidade_saques += 1
            return "Saque realizado com sucesso."
        else:
            return "Operação falhou! O valor informado é inválido."

    def visualizar_extrato(self):
        print(f"\n================ EXTRATO - Conta nr. {self.numero_conta}================")
        if not self.movimentacoes:
            print("Não foram realizadas movimentações.")
        else:
            for movimento in self.movimentacoes:
                print(movimento)
        print(f"\nSaldo: R$ {self.saldo:.2f}")
        print("==========================================")

class Cliente:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

def cadastrar_cliente(nome, data_nascimento, cpf, endereco, clientes):
    cliente = Cliente(nome, data_nascimento, cpf, endereco)
    clientes.append(cliente)
    return f"Cliente {nome} cadastrado com sucesso."

def cadastrar_conta(cpf, agencia, numero_conta, quantidade_saques, contas):
    conta = Conta(agencia, numero_conta + 1, cpf, quantidade_saques)
    contas.append(conta)
    return f"Conta {conta.numero_conta} cadastrada com sucesso."

def verifica_conta(numero_conta, contas):
    for conta in contas:
        if conta.numero_conta == numero_conta:
            return conta
    return None

def verifica_cpf(cpf, clientes):
    for cliente in clientes:
        if cliente.cpf == cpf:
            return True
    return False

def menu():
    return """
        [d] Depositar
        [s] Sacar
        [e] Extrato
        [u] Cadastrar Cliente
        [c] Cadastrar Conta
        [q] Sair

    =>"""

def main():
    LIMITE_QUANTIDADE_SAQUES = 3
    LIMITE_VALOR_SAQUE = 500
    AGENCIA = "0001"

    clientes = []
    contas = []
    numero_conta = 0
    quantidade_saques = 0

    while True:
        opcao = input(menu())

        if opcao == "d":
            numero_conta = int(input("Informe o número da conta: "))
            conta = verifica_conta(numero_conta, contas)
            if not conta:
                print("Conta não localizada.")
            else:
                valor = float(input("Informe o valor do depósito: "))
                print(conta.depositar(valor))

        elif opcao == "s":
            numero_conta = int(input("Informe o número da conta: "))
            conta = verifica_conta(numero_conta, contas)
            if not conta:
                print("Conta não localizada.")
            else:
                valor = float(input("Informe o valor do saque: "))
                print(conta.sacar(valor, LIMITE_VALOR_SAQUE, LIMITE_QUANTIDADE_SAQUES))

        elif opcao == "e":
            numero_conta = int(input("Informe o número da conta: "))
            conta = verifica_conta(numero_conta, contas)
            if not conta:
                print("Conta não localizada.")
            else:
                conta.visualizar_extrato()

        elif opcao == "u":
            cpf = int(input("Informe o CPF do cliente (somente números): "))
            if verifica_cpf(cpf, clientes):
                print("Cliente já cadastrado.")
            else:
                nome = str(input("Informe o nome do cliente: "))
                data_nascimento = str(input("Informe a data nascimento (dd-mm-aaaa) do cliente: "))

                logradouro = str(input("Informe o logradouro do cliente: "))
                numero = int(input("Informe o número do logradouro do cliente: "))
                bairro = str(input("Informe o bairro do cliente: "))
                cidade = str(input("Informe a cidade do cliente: "))
                uf = str(input("Informe a uf do cliente: "))
                endereco = f"{logradouro}, {numero} - {bairro} - {cidade}/{uf}"

                print(cadastrar_cliente(nome, data_nascimento, cpf, endereco, clientes))

        elif opcao == "c":
            cpf = int(input("Informe o CPF do cliente (somente números): "))
            if not verifica_cpf(cpf, clientes):
                print("Cliente não localizado.")
            else:
                print(cadastrar_conta(cpf, AGENCIA, numero_conta, quantidade_saques, contas))

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")

main()